package fr.mesabloo.heavymachdefense.managers

import com.badlogic.gdx.graphics.g2d.Animation
import com.badlogic.gdx.graphics.g2d.TextureRegion
import com.badlogic.gdx.utils.Array
import com.badlogic.gdx.utils.Disposable

/**
 * An internal counter used to create unique identifiers for animations.
 */
private var internalCounter: Long = 0

/**
 * A very simple manager for animations.
 *
 * Provides pausing, resuming and retrieving the current keyframe of the animation.
 */
class AnimationManager : Disposable {
    private data class AnimationHolder(
        val animation: Animation<TextureRegion>,
        var paused: Boolean,
        var currentTime: Float
    )

    private val animations: Array<AnimationHolder> = Array(10)

    /**
     * Creates a new (paused) animation from the given frame duration and keyframes.
     *
     * @param keyframeDuration The duration of a single keyframe.
     *                         The whole animation will last this duration multiplied by the number of keyframes.
     * @param keyframes All the keyframes of the animation.
     *
     * @return An identifier to manipulate the newly created animation
     */
    fun newAnimation(keyframeDuration: Float, keyframes: Array<TextureRegion>): Long {
        this.animations.insert(
            internalCounter.toInt(),
            AnimationHolder(Animation(keyframeDuration, keyframes), true, 0f)
        )

        return internalCounter++
    }

    /**
     * Checks whether an animation is paused.
     *
     * @param id The unique identifier of the animatino, generated by [newAnimation].
     *
     * @return `true` if the animation is paused, otherwise `false`
     */
    fun isPaused(id: Long): Boolean = this.animations[id.toInt()].paused

    /**
     * Updates the current keyframe of an animation if it is not paused.
     *
     * @param id The identifier of the animation.
     * @param deltaTime How much time was consumed from the last time this function was called.
     *
     * @return The texture for the current keyframe of the animation
     */
    fun update(id: Long, deltaTime: Float): TextureRegion {
        val holder = this.animations[id.toInt()]

        if (!holder.paused)
            holder.currentTime += deltaTime

        if (holder.animation.isAnimationFinished(holder.currentTime))
            holder.paused = true

        return holder.animation.getKeyFrame(holder.currentTime)
    }

    /**
     * Changes the current keyframe of an animation.
     *
     * @param id The identifier of the animation.
     * @param index The index of the keyframe in the animation (starting from 0 for the first keyframe).
     */
    fun setCurrentKeyframe(id: Long, index: Int) {
        this.animations[id.toInt()].currentTime = index * this.animations[id.toInt()].animation.frameDuration
    }

    /**
     * Pause an animation.
     * A paused animation will not be updated in the [update] method.
     *
     * @param id The identifier of the animation to pause.
     */
    fun pause(id: Long) {
        this.animations[id.toInt()].paused = true
    }

    /**
     * Resume an animation.
     *
     * Note: this has no effect if the animation was already resumed.
     *
     * @param id The identifier of the animation to pause.
     */
    fun resume(id: Long) {
        this.animations[id.toInt()].paused = false
    }

    override fun dispose() {
        this.animations.clear()

        internalCounter = 0
    }
}

val animationManager by lazy { AnimationManager() }